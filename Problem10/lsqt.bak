#lang racket

(display "\nProblem 10 - lstq2 - G003144177\n")

(define x (list 4.5 5.1 6.2 7.8)) ; problem sheet x values
(define y (list 1.1 -0.1 6.1 3.8)) ; problem sheet y value
(define (sqre n)(* n n)) ; square number function

(define (lstq2 l m) ; define operation function
  (define (sumList d) ; sum function signiture
  (if (null? d) ; check if x is null
      0 ; return 0 if null
      (+ (car d)(sumList (cdr d)))))  ; use car to take first element and sum it with next element in list, repeat steps until cdr returns #t, then return result(d)
  (if (null? l) ; check if l is null
      0 ; return 0 if l is null
      (if (null? m) ;check if m is null
          0 ; return 0 if m is null
          (sumList (list (sqre (- (car l)(car m))) (lstq2 (cdr l)(cdr m))))))) ; take m from l, square the result, put square result into list, pass to sumList

(display "\nProblem sheet list x list:\n")
(display x)
(display "\nProblem sheet list y list:\n")
(display y)
(display "\nResults:\n")
(lstq2 x y) ; Pass lists x and y to function

(define testx (list 7.10 2.3 4.5 6.1))
(define testy (list 2.1 3.1 0.1 4.10))

(display "\nTestx list:\n")
(display testx) ; display testx list
(display "\nTesty list:\n")
(display testy) ; display testy list
(display "\nResults:\n")
(lstq2 testx testy) ; Pass Test case lists to function