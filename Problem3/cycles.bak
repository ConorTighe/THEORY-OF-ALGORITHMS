#lang racket

(define (lcycle LIST); Pass list in function signiture 
  (if (null? LIST); Check if LIST null
      '()
      (append (cdr LIST) ; return second elemtent in list and join to below
              (cons (car LIST); gets start of list check if its valid and then joins to end
                    '()))))

(define (rcycle LIST); Pass list in function signiture 
  (if (null? LIST); Check if LIST null
      '()
      (append (car LIST) ; return second elemtent in list and join to below
              (cons (cdr LIST); gets start of list check if its valid and then joins to end
                    '()))))

(lcycle (list 1 2 3 4 5))

(rcycle (list 1 2 3 4 5))
