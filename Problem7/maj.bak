#lang racket

(define (Compare? 1st 2nd 3rd)
  (if(null? 1st); Check if first list is empty
   0
  (if(null? 2nd); Check if second list is empty
   0
  (if(null? 3rd); Check if third list is empty
   0
   (cons (cond [(= (+ (car 1st) (car 2nd)) 0) 0]
      [(= (+ (car 1st) (car 3rd)) 0) 0]
      [else (Compare? (cdr 1st) (cdr 2nd) (cdr 3rd)) 1]))))))

(define example1 (list 0 0 0 0 1 1 1 1)) ; Create first list from problem sheet
(define example2 (list 0 0 1 1 0 0 1 1)) ; create second list from problem sheet
(define example3 (list 0 1 0 1 0 1 0 1)) ; create second list from problem sheet

(display example1); diplay list 1
(display "\n")
(display example2); display list 2
(display "\n")
(display example3); display list 3
(display "\nPositions in which they differ:\n")
(Compare? example1 example2 example3) ; pass lists to our function